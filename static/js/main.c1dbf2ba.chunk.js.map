{"version":3,"sources":["App.js","index.js"],"names":["VaultEntry","props","key","value","getVaultEntries","token","req","require","https","request","method","hostname","path","headers","maxRedirects","mode","res","chunks","on","chunk","push","body","Buffer","concat","console","log","toString","error","postData","JSON","stringify","write","end","loginToVault","App","vault_values","className","map","entry","rootElement","document","getElementById","createRoot","render"],"mappings":"gGAAA,+DAEA,SAASA,EAAWC,GAClB,OACE,6BACE,8BACE,gCACE,+BACE,6BAAKA,EAAMC,MACX,6BAAKD,EAAME,gBAMvB,CA0CA,SAASC,IAGP,OA3CF,SAAsBC,GACpB,IAaIC,EAbQC,EAAQ,IAAoBC,MAaxBC,QAXF,CACZC,OAAQ,OACRC,SAAU,uBACVC,KAAM,+BACNC,QAAS,CACP,eAAgB,oBAElBC,aAAc,GACdC,KAAM,YAGyB,SAAUC,GACzC,IAAIC,EAAS,GAEbD,EAAIE,GAAG,QAAQ,SAAUC,GACvBF,EAAOG,KAAKD,EACd,IAEAH,EAAIE,GAAG,OAAO,SAAUC,GACtB,IAAIE,EAAOC,EAAOC,OAAON,GACzBO,QAAQC,IAAIJ,EAAKK,WACnB,IAEAV,EAAIE,GAAG,SAAS,SAAUS,GACxBH,QAAQG,MAAMA,EAChB,GACF,IAEIC,EAAWC,KAAKC,UAAU,CAC5BzB,MAAO,6CAGTC,EAAIyB,MAAMH,GAEVtB,EAAI0B,KACN,CAIEC,GACO,CACL,CACE/B,IAAK,OACLC,MAAO,SAGb,CAEe,SAAS+B,IAEtB,IAAMC,EAAe/B,IAErB,OACE,sBAAKgC,UAAU,MAAK,UAClB,oDACA,6BACGD,EAAaE,KAAI,SAACC,GAAK,OACtB,cAACtC,EAAU,CAAiBG,MAAOmC,EAAMnC,OAAxBmC,EAAMpC,IAA2B,QAK5D,C,2DClFA,yCAKMqC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAAC,IAAG,M","file":"static/js/main.c1dbf2ba.chunk.js","sourcesContent":["import \"./styles.css\";\n\nfunction VaultEntry(props) {\n  return (\n    <li>\n      <div>\n        <table>\n          <tr>\n            <td>{props.key}</td>\n            <td>{props.value}</td>\n          </tr>\n        </table>\n      </div>\n    </li>\n  );\n}\n\nfunction loginToVault(token) {\n  var https = require(\"follow-redirects\").https;\n\n  var options = {\n    method: \"POST\",\n    hostname: \"or.vault.comcast.com\",\n    path: \"/v1/auth/github_convoy/login\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    maxRedirects: 20,\n    mode: \"no-cors\"\n  };\n\n  var req = https.request(options, function (res) {\n    var chunks = [];\n\n    res.on(\"data\", function (chunk) {\n      chunks.push(chunk);\n    });\n\n    res.on(\"end\", function (chunk) {\n      var body = Buffer.concat(chunks);\n      console.log(body.toString());\n    });\n\n    res.on(\"error\", function (error) {\n      console.error(error);\n    });\n  });\n\n  var postData = JSON.stringify({\n    token: \"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\"\n  });\n\n  req.write(postData);\n\n  req.end();\n}\n\nfunction getVaultEntries() {\n  // Returns values in the for of {key: \"key\", value: \"value\"}\n  loginToVault({});\n  return [\n    {\n      key: \"test\",\n      value: \"value\"\n    }\n  ];\n}\n\nexport default function App() {\n  // Fetch values from vault to display on screen\n  const vault_values = getVaultEntries();\n\n  return (\n    <div className=\"App\">\n      <h1>Vault Secrets List</h1>\n      <ul>\n        {vault_values.map((entry) => (\n          <VaultEntry key={entry.key} value={entry.value} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}
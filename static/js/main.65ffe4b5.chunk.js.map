{"version":3,"sources":["App.js","index.js"],"names":["VaultEntry","props","name","value","getVaultEntries","console","log","token","req","require","https","request","method","hostname","path","headers","maxRedirects","res","chunks","on","chunk","push","body","Buffer","concat","toString","error","postData","JSON","stringify","write","end","loginToVault","App","vault_values","className","map","entry","index","rootElement","document","getElementById","createRoot","render"],"mappings":"gGAAA,+DAEA,SAASA,EAAWC,GAClB,OACE,+BACE,6BAAKA,EAAMC,OACX,6BAAKD,EAAME,UAGjB,CA0CA,SAASC,IAGP,OADAC,QAAQC,IA1CV,SAAsBC,GACpB,IAaIC,EAbQC,EAAQ,IAAoBC,MAaxBC,QAXF,CACZC,OAAQ,OACRC,SAAU,uBACVC,KAAM,+BACNC,QAAS,CACP,eAAgB,mBAChB,8BAA+B,KAEjCC,aAAc,KAGiB,SAAUC,GACzC,IAAIC,EAAS,GAEbD,EAAIE,GAAG,QAAQ,SAAUC,GACvBF,EAAOG,KAAKD,EACd,IAEAH,EAAIE,GAAG,OAAO,SAAUC,GACtB,IAAIE,EAAOC,EAAOC,OAAON,GACzBb,QAAQC,IAAIgB,EAAKG,WACnB,IAEAR,EAAIE,GAAG,SAAS,SAAUO,GACxBrB,QAAQqB,MAAMA,EAChB,GACF,IAEIC,EAAWC,KAAKC,UAAU,CAC5BtB,MAAO,6CAGTC,EAAIsB,MAAMH,GAEVnB,EAAIuB,KACN,CAIcC,IACL,CACL,CACE9B,KAAM,OACNC,MAAO,SAGb,CAEe,SAAS8B,IAEtB,IAAMC,EAAe9B,IAErB,OACE,sBAAK+B,UAAU,MAAK,UAClB,oDACA,gCACE,gCACGD,EAAaE,KAAI,SAACC,EAAOC,GAAK,OAC7B,cAACtC,EAAU,CAAaE,KAAMmC,EAAMnC,KAAMC,MAAOkC,EAAMlC,OAAtCmC,EAA+C,UAM5E,C,2DC9EA,yCAKMC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAAC,IAAG,M","file":"static/js/main.65ffe4b5.chunk.js","sourcesContent":["import \"./styles.css\";\n\nfunction VaultEntry(props) {\n  return (\n    <tr>\n      <td>{props.name}</td>\n      <td>{props.value}</td>\n    </tr>\n  );\n}\n\nfunction loginToVault(token) {\n  var https = require(\"follow-redirects\").https;\n\n  var options = {\n    method: \"POST\",\n    hostname: \"or.vault.comcast.com\",\n    path: \"/v1/auth/github_convoy/login\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    maxRedirects: 20\n  };\n\n  var req = https.request(options, function (res) {\n    var chunks = [];\n\n    res.on(\"data\", function (chunk) {\n      chunks.push(chunk);\n    });\n\n    res.on(\"end\", function (chunk) {\n      var body = Buffer.concat(chunks);\n      console.log(body.toString());\n    });\n\n    res.on(\"error\", function (error) {\n      console.error(error);\n    });\n  });\n\n  var postData = JSON.stringify({\n    token: \"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\"\n  });\n\n  req.write(postData);\n\n  req.end();\n}\n\nfunction getVaultEntries() {\n  // Returns values in the for of {name: \"key\", value: \"value\"}\n  console.log(loginToVault({}));\n  return [\n    {\n      name: \"test\",\n      value: \"value\"\n    }\n  ];\n}\n\nexport default function App() {\n  // Fetch values from vault to display on screen\n  const vault_values = getVaultEntries();\n\n  return (\n    <div className=\"App\">\n      <h1>Vault Secrets List</h1>\n      <table>\n        <tbody>\n          {vault_values.map((entry, index) => (\n            <VaultEntry key={index} name={entry.name} value={entry.value} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}